rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
      match /profiles/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
    }
    match /socials/{userId} {
    	match /{docs=**}{
    		allow read;
      }
      match /followings/{followingUserId} {
      	allow write: if request.auth.uid == userId;
      }
      match /followers/{followerUserId}{
      allow write: if request.auth.uid == followerUserId;
      }
    }
    match /bestHighscores {
    	match/{docs=**}{
      	allow read;
   
      }
      match /{gameId} {
      	allow update, delete: if resource.data.playerId == request.auth.uid ;
        allow create: if !exists(/databases/$(database)/documents/bestHighscores/$(request.resource.id));
      }
    }
      match /allHighscores {
      	match /{docs=**} {
     			allow read; 
         
      	}
       match /{gameId} {
     	 	allow update, delete: if resource.data.playerId == request.auth.uid ;
        allow create: if !exists(/databases/$(database)/documents/allHighscores/$(request.resource.id));
      }
    }
    match /allGames {
    	match /{gameId} {
     		allow read;
    		allow write;
   	 }
    }
    match /roomData/{roomId} {
    	allow create: if !exists(/databases/$(database)/documents/roomData/$(request.resource.id));
      allow read; //: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    match /availableRooms/{userId} {
      allow create, update: if request.auth.uid == userId;
      allow delete; // change
      allow read;
    }
    match /admins/{userId} {
    	allow read;
    }
    match /tournaments/{tournamentId} {
    	// only followers can read?
    	allow read;
      allow write;
      allow create: if !exists(/databases/$(database)/documents/tournaments/$(request.resource.id));
      allow update: if 
      	request.auth.uid == resource.data.leaderId
        ||
        request.auth.uid in resource.data.playerIds;
      allow delete: if request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.leaderId;
      match /players/{playerId} {
        allow read;
        allow write;
      	allow create: if !get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.hasStarted || get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.allowLateJoin;
      	allow delete: if request.auth.uid == playerId || request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.leaderId;
        allow update: if 
        	request.auth.uid == get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.leaderId
          || 
          (
           request.auth.uid == playerId 
           &&
           (
             get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.tournmentType == "local"
              ||
              (
                !get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.runsPerPlayer 
                || 
                get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.runsPerPlayer > get(/databases/$(database)/documents/tournaments/$(tournamentId)/players/$(playerId)).data.raceData.size()
              )
            )
        );
      }
       match /metaData/{metaData} {
          allow read;
          allow write;
       }
    }
    match /customers/{uid} {
      allow read: if request.auth.uid == uid;

      match /checkout_sessions/{id} {
        allow read, write: if request.auth.uid == uid;
      }
      match /subscriptions/{id} {
        allow read: if request.auth.uid == uid;
      }
      match /payments/{id} {
        allow read: if request.auth.uid == uid;
      }
    }

    match /products/{id} {
      allow read: if true;

      match /prices/{id} {
        allow read: if true;
      }

      match /tax_rates/{id} {
        allow read: if true;
      }
    }
        function hasBasicSubs() {
      return request.auth.token.stripeRole == "basic";
    }

    function hasPremiumSubs() {
      return request.auth.token.stripeRole == "premium";
    }

    match /content-basic/{doc} {
      allow read: if hasBasicSubs() || hasPremiumSubs();
    }
    match /content-premium/{doc} {
      allow read: if hasPremiumSubs();
    }
  }
}